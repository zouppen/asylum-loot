#!/usr/bin/env php
<?php

$members_url = "https://lataamo.helsinki.hacklab.fi/api/members/?format=json";
$slackid_url = "https://lataamo.helsinki.hacklab.fi/api/access/tokens/?format=json&revoked=false&ttype=6";
$cookies = __DIR__.'/cookies.txt';
require(__DIR__.'/common.php');

// Prepare cURL
$curl = curl_init();
if ($curl === false) {
    die("Curl initialization failed\n");
}
if (curl_setopt_array($curl, [
    CURLOPT_COOKIEFILE => $cookies,
    CURLOPT_COOKIEJAR => $cookies,
    CURLOPT_FAILONERROR => true,
    CURLOPT_RETURNTRANSFER => true,
    //CURLOPT_VERBOSE => true,
]) === false) {
    die("Setting curl options failed\n");
}

// Prepare SQL
$db = init_db();
$db->exec('BEGIN; DROP TABLE IF EXISTS member; CREATE TABLE member (url,credit,fname,lname,city,email,phone,nick,accepted,anonymized_id,member_id,email_norm); DROP TABLE IF EXISTS member_slack; CREATE TABLE member_slack (owner,value,revoked);');
$stmt_member = $db->prepare('INSERT INTO member VALUES(:url,:credit,:fname,:lname,:city,:email,:phone,:nick,:accepted,:anonymized_id,:member_id,:email_norm)');
$stmt_slack = $db->prepare('INSERT INTO member_slack VALUES (:owner,:value,:revoked)');

// Due to Asylum misconfiguration, HTTPS is not used. Force it.
function force_https($url)
{
    if ($url === null) {
        return null;
    } else {
        return preg_replace('/^http:/', 'https:', $url);
    }
}

function get_json($url)
{
    global $curl;

    curl_setopt($curl, CURLOPT_URL, $url);

    $json = curl_exec($curl);
    if ($json === false) {
        die("Unable to load document from Asylum\n");
    }

    // To JSON
    $o = json_decode($json, true);
    if ($o === false) {
        die("Invalid output from Asylum\n");
    }
    return $o;
}

function store_member_page($page)
{
    global $stmt_member;

    /// Start by loading the first page
    $doc = get_json($page);

    foreach ($doc['results'] as $k => $member) {
        if ($member['url'] === 'http://lataamo.helsinki.hacklab.fi/api/members/581/?format=json') {
            print("petteri $k sivulla $page\n");
        }

        $stmt_member->reset();

        // Member types are not interesting
        unset($member['mtypes']);

        // Convert credit to a number
        $member['credit'] = floatval($member['credit']);

        // Normalize email
        $member['email_norm'] = normalize_email($member['email']);

        // Insert to the database
        foreach ($member as $k => $v) {
            $stmt_member->bindValue(':'.$k, $v);
        }
        $stmt_member->execute();
    }

    return force_https($doc['next']);
}

function store_slack_ids($page)
{
    global $db, $stmt_slack;

    $doc = get_json($page);

    foreach ($doc['results'] as $member) {
        $stmt_slack->reset();

        // We don't need everything
        unset($member['url']);
        unset($member['label']);
        unset($member['type']);

        // Put the rest
        foreach ($member as $k => $v) {
            $stmt_slack->bindValue(':'.$k, $v);
        }
        $stmt_slack->execute();
    }

    return force_https($doc['next']);
}

// Members
$page = $members_url;
for ($i=1; $page !== null; $i++) {
    $page = store_member_page($page);
    print("Member page $i parsed\n");
}

// Slack exceptions
$page = $slackid_url;
for ($i=1; $page !== null; $i++) {
    $page = store_slack_ids($page);
    print("Slack ID page $i parsed\n");
}

// Housekeeping
//$db->exec('UPDATE member AS m SET slack_id=s.userid FROM (SELECT userid, email_norm FROM slack) AS s WHERE m.slack_id IS NULL AND s.email_norm = m.email_norm');
//$changes = $db->changes();
//print("Matched $changes email pairs with Slack\n");

// Commit the changes
$db->exec('END');
