#!/usr/bin/env php
<?php

$base_url = "https://lataamo.helsinki.hacklab.fi/admin/members/member/";
$cookies = __DIR__.'/cookies.txt';
require(__DIR__.'/common.php');

// Prepare cURL
$curl = curl_init();
if ($curl === false) {
    die("Curl initialization failed\n");
}
if (curl_setopt_array($curl, [
    CURLOPT_COOKIEFILE => $cookies,
    CURLOPT_COOKIEJAR => $cookies,
    CURLOPT_FAILONERROR => true,
    CURLOPT_RETURNTRANSFER => true,
]) === false) {
    die("Setting curl options failed\n");
}

// Prepare SQL
$db = init_db();
$db->exec('BEGIN; DROP TABLE IF EXISTS member; CREATE TABLE member (name,email,nick,city,credit,mtypes,grants,email_norm);');
$stmt = $db->prepare('INSERT INTO member VALUES (:rname,:email,:nick,:city,:credit_formatted,:mtypes_formatted,:grants_formatted,:email_norm)');

function asylum_load_members($page)
{
    global $base_url, $curl;

    $url = $base_url . '?' . http_build_query(['p' => $page]);
    curl_setopt($curl, CURLOPT_URL, $url);

    $html = curl_exec($curl);
    if ($html === false) {
        die("Unable to load document from Asylum\n");
    }

    // To DOM
    $doc = new DOMDocument();
    $doc->loadHTML('<?xml encoding="UTF-8">'.$html);
    return $doc;
}

function store_page($page)
{
    global $stmt;

    $doc = asylum_load_members($page);
    $xpath = new DOMXpath($doc);
    $rows = $xpath->query("id('result_list')/tbody/tr");
    $count = 0;

    foreach ($rows as $row) {
        $stmt->reset();
    
        // Just extract cells
        $cells = $xpath->query("th|td", $row);
        foreach ($cells as $cell) {
            $cls = $cell->getAttribute('class');
            if (str_starts_with($cls, 'field-')) {
                // Only cells with field prefix contain data we need
                $param = ':'.substr($cls, 6);
                switch ($param) {
                case ':credit_formatted':
                    $val = floatval($cell->textContent);
                    break;
                default:
                    $val = $cell->textContent;
                    if ($val === '') {
                        $val = null;
                    }
                }

                if ($param === ':email' && $val !== null) {
                    $stmt->bindValue(':email_norm', normalize_email($val));
                }

                $stmt->bindValue($param, $val);
            }
        }

        $stmt->execute();
        $count++;
    }

    return $count;
}

for ($i = 1; ; $i++) {
    $got = store_page($i);
    print("Page $i: parsed $got members\n");
    if ($got < 100) break;
}

// Commit the changes
$db->exec('END');
