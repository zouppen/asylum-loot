#!/usr/bin/env php
<?php

require(__DIR__.'/common.php');

// Slack API Token (Requires 'users:read' scope)
$slack_token = file_get_contents(__DIR__.'/token.txt');
$api_url = "https://slack.com/api/users.list";
$allowed_dangling_users = [
    'USLACKBOT', // Slackbot
    'U5LAEDTFZ', // Helsinki Hacklab owner
];

if ($slack_token === false) {
    die_hard("Slack token file not found");
}

// Initialize cURL session
$curl = curl_init();
if ($curl === false) {
    die_hard("Curl initialization failed");
}

// Set cURL options using curl_setopt_array
if (curl_setopt_array($curl, [
    CURLOPT_HTTPHEADER => [
        "Authorization: Bearer $slack_token",
    ],
    CURLOPT_FAILONERROR => true,
    CURLOPT_RETURNTRANSFER => true,
    //CURLOPT_VERBOSE => true,
]) === false) {
    die_hard("Setting curl options failed");
}

// Prepare SQL
$db = init_db();
$db->exec('BEGIN; DROP TABLE IF EXISTS slack; CREATE TABLE slack (id,name,deleted,real_name,title,displayname,email,email_norm,bot,updated,email_confirmed,alive);');
$stmt = $db->prepare('INSERT INTO slack VALUES (:id,:name,:deleted,:real_name,:title,:displayname,:email,:email_norm,:bot,:updated,:email_confirmed,:alive)');

$page = 1;
$params = ["limit" => 100];

while (true) {
    printf("Slack page %d... ", $page);

    if (curl_setopt($curl, CURLOPT_URL, $api_url.'?'.http_build_query($params)) === false) {
        die_hard("Setting curl options failed");
    }

    // Execute cURL request and close session
    $response = curl_exec($curl);
    if ($response === false) {
        die_hard("Unable to load users from Slack");
    }

    // Decode response
    $data = json_decode($response, true);
    if ($data === null) {
        die_hard("Unable to load decode Slack response");
    }

    $count = 0;
    foreach ($data['members'] as $member) {
        // Email for later normalization
        $email = @$member['profile']['email'];

        // Simplify queries and get alive accounts
        $alive = !($member['is_bot'] ||
                   $member['deleted'] ||
                   in_array($member['id'], $allowed_dangling_users));

        $stmt->bindValue(':id', $member['id']);
        $stmt->bindValue(':name', $member['name']);
        $stmt->bindValue(':deleted', $member['deleted']);
        $stmt->bindValue(':real_name', $member['profile']['real_name']);
        $stmt->bindValue(':title', $member['profile']['title']);
        $stmt->bindValue(':displayname', $member['profile']['display_name']);
        $stmt->bindValue(':email', $email);
        $stmt->bindValue(':email_norm', normalize_email($email));
        $stmt->bindValue(':bot', $member['is_bot']);
        $stmt->bindValue(':updated', $member['updated']);
        $stmt->bindValue(':email_confirmed', @$member['is_email_confirmed']);
        $stmt->bindValue(':alive', $alive);

        $stmt->execute();
        $count++;
    }
    printf("parsed %3d users\n", $count);

    $page++;
    $params['cursor'] = $data['response_metadata']['next_cursor'];
    if (empty($params['cursor'])) {
        // All done
        break;
    }
}

slack_match($db);

$db->exec('END');
curl_close($curl);
